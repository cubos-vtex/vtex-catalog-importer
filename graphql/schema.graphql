directive @WithSettings on FIELD | FIELD_DEFINITION

type AppSettings {
  useDefault: Boolean
  account: String
  vtexAppKey: String
  vtexAppToken: String
}

input AppSettingsInput {
  useDefault: Boolean
  account: String
  vtexAppKey: String
  vtexAppToken: String
}

type Category {
  id: ID!
  name: String!
  children: [Category!]
}

input CategoryInput {
  id: ID!
  name: String!
  children: [CategoryInput!]
}

enum StocksOption {
  KEEP_SOURCE
  UNLIMITED
  TO_BE_DEFINED
}

enum ImportStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
  TO_BE_DELETED
  DELETING
}

type Import {
  id: ID!
  createdIn: String!
  lastInteractionIn: String!
  user: String!
  settings: AppSettings!
  categoryTree: [Category!]!
  importImages: Boolean!
  importPrices: Boolean!
  stocksOption: StocksOption!
  sourceBrandsTotal: Int!
  sourceCategoriesTotal: Int!
  sourceProductsTotal: Int!
  sourceSkusTotal: Int!
  sourcePricesTotal: Int!
  sourceStocksTotal: Int!
  stockValue: Int
  status: ImportStatus!
  error: String
  entityError: String
}

input ImportInput {
  settings: AppSettingsInput!
  categoryTree: [CategoryInput!]!
  importImages: Boolean!
  importPrices: Boolean!
  stocksOption: StocksOption!
  stockValue: Int
  status: ImportStatus
}

input SearchInput {
  page: Int!
  pageSize: Int!
  sort: String
  where: String
}

type Pagination {
  page: Int!
  pageSize: Int!
  total: Int!
}

type ImportsResult {
  data: [Import!]!
  pagination: Pagination!
}

type Entity {
  id: ID!
  createdIn: String!
  lastInteractionIn: String!
  name: String!
  executionImportId: ID!
  sourceAccount: String!
  sourceId: String!
  targetId: String
  pathParams: String
  payload: String!
}

type ImportProgress {
  currentImport: Import!
  brands: Int!
  categories: Int!
  products: Int!
  skus: Int!
  prices: Int!
  stocks: Int!
}

type Query {
  appSettings: AppSettings! @WithSettings
  categories(settings: AppSettingsInput): [Category!] @WithSettings
  imports(args: SearchInput!): ImportsResult!
  getImport(id: ID!): Import!
  importProgress(id: ID!): ImportProgress!
  getEntities(executionImportId: ID!, name: String!): [Entity!]!
}

type Mutation {
  updateAppSettings(settings: AppSettingsInput): AppSettings! @WithSettings
  executeImport(args: ImportInput!): ID! @WithSettings
  deleteImport(id: ID!): ID!
}
